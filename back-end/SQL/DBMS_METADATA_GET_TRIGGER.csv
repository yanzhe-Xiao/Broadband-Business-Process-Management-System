"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_APP_USER_UPD"" 
    BEFORE INSERT OR UPDATE ON APP_USER
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_APP_USER_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_APP_USER_SOFTDEL"" BEFORE INSERT OR UPDATE ON APP_USER FOR EACH ROW BEGIN   IF INSERTING THEN     IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   ELSE     IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   END IF; END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_APP_USER_SOFTDEL"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_IP_POOL_UPD"" 
    BEFORE INSERT OR UPDATE ON IP_POOL
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_IP_POOL_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_UPD"" 
    BEFORE INSERT OR UPDATE ON ORDERS
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_CANCEL_ITEMS"" 
    AFTER UPDATE OF STATUS ON ORDERS
    FOR EACH ROW
BEGIN
    -- 当 ORDERS.STATUS 更新为 已取消 时
    IF :NEW.STATUS = '已取消' AND NVL(:OLD.STATUS, 'X') <> '已取消' THEN
        UPDATE ORDER_ITEM
        SET STATUS = '已取消'
        WHERE ORDER_ID = :NEW.ID
          AND STATUS = '待支付';
    END IF;
END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_CANCEL_ITEMS"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_ADDR_AIUD"" 
    BEFORE INSERT OR UPDATE OF PROVINCE, CITY, DISTRICT, DETAIL_ADDRESS ON ORDERS
    FOR EACH ROW
BEGIN
    :NEW.INSTALL_ADDRESS := FORMAT_ADDRESS(
            :NEW.PROVINCE,
            :NEW.CITY,
            :NEW.DISTRICT,
            :NEW.DETAIL_ADDRESS
                            );
END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_ADDR_AIUD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_SOFTDEL"" BEFORE INSERT OR UPDATE ON ORDERS FOR EACH ROW BEGIN   IF INSERTING THEN     IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   ELSE     IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   END IF; END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDERS_SOFTDEL"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDER_ITEM_UPD"" 
    BEFORE INSERT OR UPDATE ON ORDER_ITEM
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDER_ITEM_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDER_ITEM_STATUS_STOCK"" 
    AFTER UPDATE OF STATUS ON ORDER_ITEM
    FOR EACH ROW
DECLARE
BEGIN
    -- 从 非待支付 -> 待支付：扣减库存
    IF :NEW.STATUS = '待支付' AND NVL(:OLD.STATUS, 'X') <> '待支付' THEN
        UPDATE TARIFF_PLAN
        SET QTY = QTY - :NEW.QTY
        WHERE PLAN_CODE = :NEW.PLAN_CODE
          AND QTY >= :NEW.QTY;
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, '库存不足，无法设置为待支付');
        END IF;

        -- 从 待支付 -> 在购物车中：恢复库存
    ELSIF :OLD.STATUS = '待支付' AND :NEW.STATUS = '已取消' THEN
        UPDATE TARIFF_PLAN
        SET QTY = QTY + :OLD.QTY
        WHERE PLAN_CODE = :NEW.PLAN_CODE;
    END IF;
END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDER_ITEM_STATUS_STOCK"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_OI_QTY_FOREVER"" 
    BEFORE INSERT OR UPDATE OF PLAN_TYPE, QTY ON ORDER_ITEM
    FOR EACH ROW
BEGIN
    IF :NEW.PLAN_TYPE IS NOT NULL AND UPPER(:NEW.PLAN_TYPE) = 'FOREVER' THEN
        :NEW.QTY := 1;
    END IF;
END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_OI_QTY_FOREVER"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ORDER_ITEM_PENDING_EXPIRE"" 
    BEFORE INSERT OR UPDATE OF STATUS ON ORDER_ITEM
    FOR EACH ROW
BEGIN
    IF :NEW.STATUS = '待支付' THEN
        :NEW.STATUS_EXPIRE_AT := SYSTIMESTAMP + INTERVAL '30' MINUTE;
    ELSE
        -- 其他状态不需要倒计时，清空
        :NEW.STATUS_EXPIRE_AT := NULL;
    END IF;
END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ORDER_ITEM_PENDING_EXPIRE"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_OUTBOX_EVENT_UPD"" 
    BEFORE INSERT OR UPDATE ON OUTBOX_EVENT
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_OUTBOX_EVENT_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_PERMISSION_UPD"" 
    BEFORE INSERT OR UPDATE ON PERMISSION
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_PERMISSION_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_PERMISSION_SOFTDEL"" BEFORE INSERT OR UPDATE ON PERMISSION FOR EACH ROW BEGIN   IF INSERTING THEN     IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   ELSE     IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   END IF; END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_PERMISSION_SOFTDEL"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_PERM_GROUP_SOFTDEL"" BEFORE INSERT OR UPDATE ON PERM_GROUP FOR EACH ROW BEGIN   IF INSERTING THEN     IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   ELSE     IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   END IF; END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_PERM_GROUP_SOFTDEL"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_PERM_GROUP_UPD"" 
    BEFORE INSERT OR UPDATE ON PERM_GROUP
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_PERM_GROUP_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_RESOURCE_DEVICE_UPD"" 
    BEFORE INSERT OR UPDATE ON RESOURCE_DEVICE
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_RESOURCE_DEVICE_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ROLE_SOFTDEL"" BEFORE INSERT OR UPDATE ON ROLE FOR EACH ROW BEGIN   IF INSERTING THEN     IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   ELSE     IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   END IF; END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ROLE_SOFTDEL"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_ROLE_UPD"" 
    BEFORE INSERT OR UPDATE ON ROLE
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_ROLE_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_TARIFF_PLAN_UPD"" 
    BEFORE INSERT OR UPDATE ON tariff_plan
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_TARIFF_PLAN_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_TICKET_UPD"" 
    BEFORE INSERT OR UPDATE ON TICKET
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_TICKET_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_TICKET_SOFTDEL"" BEFORE INSERT OR UPDATE ON TICKET FOR EACH ROW BEGIN   IF INSERTING THEN     IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   ELSE     IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN       :NEW.deleted_at := SYSTIMESTAMP;     ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN       :NEW.deleted_at := NULL;     END IF;   END IF; END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_TICKET_SOFTDEL"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_USER_ROLE_UPD"" 
    BEFORE INSERT OR UPDATE ON USER_ROLE
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_USER_ROLE_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_WORKFLOW_INSTANCE_UPD"" 
    BEFORE INSERT OR UPDATE ON WORKFLOW_INSTANCE
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_WORKFLOW_INSTANCE_UPD"" ENABLE"
"
  CREATE OR REPLACE EDITIONABLE TRIGGER ""C##BSS_DATA"".""TRG_WORKFLOW_STEP_UPD"" 
    BEFORE INSERT OR UPDATE ON WORKFLOW_STEP
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;
ALTER TRIGGER ""C##BSS_DATA"".""TRG_WORKFLOW_STEP_UPD"" ENABLE"

CREATE TABLE perm_group (
                            id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            code         VARCHAR2(64)     NOT NULL UNIQUE,  -- 如: SYS, ORDER, BILLING
                            name         VARCHAR2(128)    NOT NULL,
                            sort_no      NUMBER(10)       DEFAULT 0 NOT NULL,
                            deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                            deleted_at   TIMESTAMP(6),
                            version      NUMBER(10)       DEFAULT 0 NOT NULL,
                            created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                            updated_at   TIMESTAMP(6)
);

CREATE TABLE permission (
                            id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            group_code   VARCHAR2(64)     NOT NULL,       -- FK -> perm_group.code
                            code         VARCHAR2(128)    NOT NULL UNIQUE, -- 如: ORDER:READ, ORDER:CREATE
                            name         VARCHAR2(128)    NOT NULL,
                            type         VARCHAR2(32)     DEFAULT 'API' NOT NULL, -- API/MENU/BUTTON
                            pre_resource VARCHAR2(256),                    -- 资源路径或标识
                            action       VARCHAR2(32),                     -- READ/CREATE/UPDATE/DELETE
                            meta_json    CLOB,
                            deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                            deleted_at   TIMESTAMP(6),
                            version      NUMBER(10)       DEFAULT 0 NOT NULL,
                            created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                            updated_at   TIMESTAMP(6)
);

CREATE TABLE role (
                      id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      role_code    VARCHAR2(64)     NOT NULL UNIQUE,   -- ROLE_ADMIN / ROLE_TECH / ROLE_AGENT / ROLE_FIN
                      role_name    VARCHAR2(128)    NOT NULL,
                      status       VARCHAR2(16)     DEFAULT 'ACTIVE' NOT NULL,
                      data_scope   VARCHAR2(64),                      -- 全部/本部门/自定义 等（可选）
                      deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                      deleted_at   TIMESTAMP(6),
                      version      NUMBER(10)       DEFAULT 0 NOT NULL,
                      created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                      updated_at   TIMESTAMP(6)
);

CREATE TABLE app_user (
                          id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          username     VARCHAR2(64)     NOT NULL UNIQUE,
                          password     VARCHAR2(128)    NOT NULL,       -- BCRYPT
                          full_name    VARCHAR2(128),
                          phone        VARCHAR2(32),
                          email        VARCHAR2(128),
                          status       VARCHAR2(16)     DEFAULT 'ACTIVE' NOT NULL,
                          tenant_id    VARCHAR2(64),                    -- 多租户可选
                          deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                          deleted_at   TIMESTAMP(6),
                          version      NUMBER(10)       DEFAULT 0 NOT NULL,
                          created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                          updated_at   TIMESTAMP(6)
);

CREATE TABLE user_role (
                           user_id      NUMBER(19)       NOT NULL,
                           role_id      NUMBER(19)       NOT NULL,
                           PRIMARY KEY (user_id, role_id),
                           CONSTRAINT fk_ur_user FOREIGN KEY (user_id) REFERENCES app_user(id),
                           CONSTRAINT fk_ur_role FOREIGN KEY (role_id) REFERENCES role(id)
);

CREATE TABLE role_permission (
                                 role_id      NUMBER(19)       NOT NULL,
                                 perm_id      NUMBER(19)       NOT NULL,
                                 PRIMARY KEY (role_id, perm_id),
                                 CONSTRAINT fk_rp_role FOREIGN KEY (role_id) REFERENCES role(id),
                                 CONSTRAINT fk_rp_perm FOREIGN KEY (perm_id) REFERENCES permission(id)
);



-----------------------------------
-- 1) 权限分组
-----------------------------------
INSERT INTO perm_group (code, name, sort_no) VALUES ('SYS',    '系统管理', 10);
INSERT INTO perm_group (code, name, sort_no) VALUES ('ORDER',  '订单管理', 20);
INSERT INTO perm_group (code, name, sort_no) VALUES ('BILLING','计费出账', 30);

-----------------------------------
-- 2) 细粒度权限（示例）
-----------------------------------
-- 系统管理
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:READ',   '用户查看',   'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:CREATE', '用户创建',   'API', 'CREATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:UPDATE', '用户修改',   'API', 'UPDATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:DELETE', '用户删除',   'API', 'DELETE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:ROLE:READ',   '角色查看',   'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:ROLE:ASSIGN', '角色分配',   'API', 'UPDATE');

-- 订单管理
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:READ',    '订单查看',   'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:CREATE',  '订单创建',   'API', 'CREATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:UPDATE',  '订单更新',   'API', 'UPDATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:CANCEL',  '订单撤销',   'API', 'DELETE');

-- 计费出账
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('BILLING', 'BILLING:READ',     '账单查看', 'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('BILLING', 'BILLING:GENERATE', '生成账单', 'API', 'CREATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('BILLING', 'INVOICE:READ',     '发票查看', 'API', 'READ');

-----------------------------------
-- 3) 角色
-----------------------------------
INSERT INTO role (role_code, role_name) VALUES ('ROLE_ADMIN', '平台管理员');
INSERT INTO role (role_code, role_name) VALUES ('ROLE_AGENT', '客服坐席');
INSERT INTO role (role_code, role_name) VALUES ('ROLE_TECH',  '装维工程师');
INSERT INTO role (role_code, role_name) VALUES ('ROLE_FIN',   '财务人员');

-----------------------------------
-- 4) 初始管理员账户
-- 这里直接给“admin / password”
-- 密码使用 BCrypt，并带前缀 {bcrypt} 方便 Spring Security 识别
-- 这个哈希对应明文 "password"
-----------------------------------
INSERT INTO app_user (username, password, full_name, email, status)
VALUES (
           'admin',
           '{bcrypt}$2a$10$dHiyqQRYOjeios6uDKtkzuRGw0pP9grjDvcuQ0slW2H0Cbdg.dOOK',
           '系统管理员',
           'admin@example.com',
           'ACTIVE'
       );
COMMIT;

-----------------------------------
-- 5) 绑定用户角色：admin -> ROLE_ADMIN
-----------------------------------
INSERT INTO user_role (user_id, role_id)
SELECT u.id, r.id
FROM app_user u, role r
WHERE u.username = 'admin'
  AND r.role_code = 'ROLE_ADMIN';
commit
    -----------------------------------
-- 6) 角色授权
--   - ROLE_ADMIN 拥有所有权限
--   - ROLE_AGENT：订单查看/创建
--   - ROLE_TECH ：订单查看/更新
--   - ROLE_FIN  ：计费查看/生成 + 发票查看
-----------------------------------

-- ROLE_ADMIN -> ALL
    INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id
FROM role r CROSS JOIN permission p
WHERE r.role_code = 'ROLE_ADMIN';
COMMIT;

-- ROLE_AGENT
INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_AGENT'
  AND p.code IN ('ORDER:READ','ORDER:CREATE');
COMMIT;

-- ROLE_TECH
INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_TECH'
  AND p.code IN ('ORDER:READ','ORDER:UPDATE');
COMMIT;

-- ROLE_FIN
INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_FIN'
  AND p.code IN ('BILLING:READ','BILLING:GENERATE','INVOICE:READ');
COMMIT;

INSERT INTO role (role_code, role_name) VALUES ('ROLE_CUSTOMER', '客户');
commit

-- 赋权：客户可创建/查看订单、查看账单和发票
    INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id
FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_CUSTOMER'
  AND p.code IN (
                 'ORDER:READ',         -- 查看（代码里只放行“自己的”）
                 'ORDER:CREATE',       -- 下单
                 'BILLING:READ',       -- 查账单
                 'INVOICE:READ'        -- 查发票
    );
COMMIT;

ALTER TABLE permission
    ADD CONSTRAINT fk_perm_group
        FOREIGN KEY (group_code) REFERENCES perm_group(code);

ALTER TABLE role
    ADD CONSTRAINT chk_role_status CHECK (status IN ('ACTIVE','DISABLED'));

ALTER TABLE app_user
    ADD CONSTRAINT chk_app_user_status CHECK (status IN ('ACTIVE','LOCKED','DISABLED'));


-- 通用过程：给任意表生成 BEFORE INSERT OR UPDATE 行级触发器
CREATE OR REPLACE PROCEDURE add_update_trigger(p_table_name VARCHAR2) AS
    v_sql CLOB;
BEGIN
    v_sql := 'CREATE OR REPLACE TRIGGER trg_'||p_table_name||'_upd
    BEFORE INSERT OR UPDATE ON '||p_table_name||'
    FOR EACH ROW
  BEGIN
    IF INSERTING THEN
      IF :NEW.created_at IS NULL THEN :NEW.created_at := SYSTIMESTAMP; END IF;
      IF :NEW.updated_at IS NULL THEN :NEW.updated_at := SYSTIMESTAMP; END IF;
    ELSE
      :NEW.updated_at := SYSTIMESTAMP;
    END IF;
  END;';
EXECUTE IMMEDIATE v_sql;
END;
/
-- 给权限/角色/用户与中间表全部挂上触发器
BEGIN
    add_update_trigger('PERM_GROUP');
    add_update_trigger('PERMISSION');
    add_update_trigger('ROLE');
    add_update_trigger('APP_USER');
END;
/

CREATE OR REPLACE PROCEDURE add_deleted_at_trigger(p_table_name VARCHAR2)
    AUTHID DEFINER
AS
    v_tbl         VARCHAR2(128) := UPPER(p_table_name);
    v_has_deleted NUMBER;
    v_has_del_at  NUMBER;
    v_body        CLOB;
    v_sql         CLOB;
BEGIN
SELECT COUNT(*) INTO v_has_deleted
FROM USER_TAB_COLS WHERE TABLE_NAME = v_tbl AND COLUMN_NAME = 'DELETED';
SELECT COUNT(*) INTO v_has_del_at
FROM USER_TAB_COLS WHERE TABLE_NAME = v_tbl AND COLUMN_NAME = 'DELETED_AT';

-- 生成触发器主体：只有在两列都存在时才做维护，否则生成空触发器（不报错）
IF v_has_deleted = 1 AND v_has_del_at = 1 THEN
        v_body :=
                'BEGIN '||
                '  IF INSERTING THEN '||
                '    IF :NEW.deleted = 1 AND :NEW.deleted_at IS NULL THEN '||
                '      :NEW.deleted_at := SYSTIMESTAMP; '||
                '    ELSIF :NEW.deleted = 0 THEN '||
                '      :NEW.deleted_at := NULL; '||           -- 可选：新增记录未删除则置空
                '    END IF; '||
                '  ELSE '||
                '    IF NVL(:OLD.deleted,0) = 0 AND :NEW.deleted = 1 THEN '||
                '      :NEW.deleted_at := SYSTIMESTAMP; '||   -- 0→1：打上删除时间
                '    ELSIF NVL(:OLD.deleted,0) = 1 AND :NEW.deleted = 0 THEN '||
                '      :NEW.deleted_at := NULL; '||           -- 1→0：撤销删除，清空
                '    END IF; '||
                '  END IF; '||
                'END;';
ELSE
        v_body := 'BEGIN NULL; END;';
END IF;

    v_sql := 'CREATE OR REPLACE TRIGGER trg_'||v_tbl||'_softdel '||
             'BEFORE INSERT OR UPDATE ON '||v_tbl||' '||
             'FOR EACH ROW '||v_body;

EXECUTE IMMEDIATE v_sql;
END;
/

BEGIN
    add_deleted_at_trigger('PERM_GROUP');
    add_deleted_at_trigger('PERMISSION');
    add_deleted_at_trigger('ROLE');
    add_deleted_at_trigger('APP_USER');
END;
/

-- 业务

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- 1) 参考/基础域
--------------------------------------------------------------------------------
-- 套餐（资费）
CREATE TABLE tariff_plan (
                             plan_code     VARCHAR2(32) PRIMARY KEY,
                             name          VARCHAR2(100) NOT NULL,
                             monthly_fee   NUMBER(12,2)  DEFAULT 0,
                             yearly_fee    NUMBER(12,2)  DEFAULT 0,
                             forever_fee   NUMBER(12,2)  DEFAULT 0,
                             plan_period   NUMBER(10),
                             discount      NUMBER(5,2)   DEFAULT 100.00 NOT NULL,
                             status        VARCHAR2(16)  DEFAULT 'ACTIVE' NOT NULL,
                             created_at    TIMESTAMP(6)  DEFAULT SYSTIMESTAMP NOT NULL,
                             updated_at    TIMESTAMP(6),
                             IP_ID         NUMBER(19),
                             DEVICE_ID     NUMBER(19),
                             IS_IP         NUMBER(1) DEFAULT 0 NOT NULL,
                             BANDWIDTH     NUMBER(10)
);
ALTER TABLE tariff_plan
    ADD CONSTRAINT chk_tariff_status CHECK (status IN ('ACTIVE','INACTIVE'));

-- EXEC add_update_trigger('tariff_plan');




--------------------------------------------------------------------------------
-- 2) 订单域
-- orders
-- 作用：宽带新装 / 变更 / 销户的主订单。
-- 关键字段
-- user_id（或 customer_id）：下单人（FK → app_user.id）。
-- plan_code（FK → tariff_plan.plan_code）。
-- status：CREATED/RESERVED/ASSIGNED/ON_SITE/DONE/BILLED/CANCELED/TERMINATED。
-- install_address：装机地址。
-- reserved_port_code：预占端口（FK → resource_port.code）。
-- start_billing_at：开始计费时间。
-- deleted/deleted_at、version（乐观锁）。
-- 常用索引
-- idx_orders_user(user_id)：用户订单列表。
-- idx_orders_status(status)：工单池/看板筛选。
-- idx_orders_del_at(deleted, deleted_at)：清理作业/归档扫描。
-- 典型查询：用户订单分页（user_id + status + created_at desc）
--------------------------------------------------------------------------------
CREATE TABLE orders (
                        id                 NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        user_id            NUMBER(19) NOT NULL,
                        status             VARCHAR2(16) NOT NULL,
                        install_address    VARCHAR2(256),
                        deleted            NUMBER(1) DEFAULT 0 NOT NULL,
                        deleted_at         TIMESTAMP(6),
                        version            NUMBER(10) DEFAULT 0 NOT NULL,
                        created_at         TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                        updated_at         TIMESTAMP(6)
);
ALTER TABLE orders
    ADD CONSTRAINT fk_orders_customer
        FOREIGN KEY (user_id) REFERENCES app_user(id);



ALTER TABLE orders
    ADD CONSTRAINT chk_orders_status
        CHECK (status IN ('CREATED','RESERVED','ASSIGNED','ON_SITE','DONE','BILLED','CANCELED','TERMINATED'))
        -- 状态说明:
        -- CREATED: 订单已创建
        -- RESERVED: 资源已预占
        -- ASSIGNED: 已指派给装维人员
        -- ON_SITE: 正在上门安装
        -- DONE: 安装完成
        -- BILLED: 已出账
        -- CANCELED: 已取消
        -- TERMINATED: 已终止

CREATE INDEX idx_orders_cust   ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_del_at ON orders(deleted, deleted_at);

-- EXEC add_update_trigger('orders');

-- order_item
-- 作用：订单明细（增值项、融合产品）。
-- 关键字段：order_id、sku_code、qty、price。
-- 索引：idx_order_item_order(order_id)（按订单加载明细）。
-- 订单明细
CREATE TABLE order_item (
                            id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            order_id   NUMBER(19) NOT NULL,
                            plan_code   VARCHAR2(32) NOT NULL, -- plan_code 是 库存量单位代码（Stock Keeping Unit
                            -- Code），用于唯一标识商品或服务的最小可销售单元。在订单明细表 order_item 中，它表示具体购买的产品或服务项的编码。
                            start_billing_at   DATE,
--                             TODO 当时间过期时数据库应设置一个触发器把所拥有的plan_code里的ip资源释放回去
                            end_billing DATE, -- NULL 有效时间 NULL代表永久有效
                            qty        NUMBER(10)   DEFAULT 1 NOT NULL, -- 数量
                            price      NUMBER(12,2) DEFAULT 0 NOT NULL,
                            created_at TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                            updated_at TIMESTAMP(6)
);
ALTER TABLE order_item
    ADD CONSTRAINT fk_order_item_order
        FOREIGN KEY (order_id) REFERENCES orders(id);

ALTER TABLE order_item
    ADD CONSTRAINT fk_orders_plan
        FOREIGN KEY (plan_code) REFERENCES tariff_plan(plan_code);

CREATE INDEX idx_order_item_order ON order_item(order_id);

-- EXEC add_update_trigger('order_item');

-- 订单事件（可选）
CREATE TABLE order_event (
                             id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                             order_id   NUMBER(19) NOT NULL,
                             event      VARCHAR2(64) NOT NULL,
                             payload    CLOB,  -- 用于存储事件的详细信息或数据，可以是JSON或其他格式的文本数据
                             created_at TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
);
ALTER TABLE order_event
    ADD CONSTRAINT fk_order_event_order
        FOREIGN KEY (order_id) REFERENCES orders(id);

CREATE INDEX idx_order_event_order ON order_event(order_id);

-- 为 tariff_plan 表添加注释
COMMENT ON TABLE tariff_plan IS '套餐资费表，存储宽带套餐信息';

COMMENT ON COLUMN tariff_plan.plan_code IS '套餐编码，主键';
COMMENT ON COLUMN tariff_plan.name IS '套餐名称';
COMMENT ON COLUMN tariff_plan.monthly_fee IS '月费';
COMMENT ON COLUMN tariff_plan.yearly_fee IS '年费';
COMMENT ON COLUMN tariff_plan.forever_fee IS '永久费';
COMMENT ON COLUMN tariff_plan.plan_period IS '套餐有效期';
COMMENT ON COLUMN tariff_plan.disconut IS '折扣率，100为无折扣';
COMMENT ON COLUMN tariff_plan.status IS '状态：ACTIVE-启用，INACTIVE-停用';
COMMENT ON COLUMN tariff_plan.created_at IS '创建时间';
COMMENT ON COLUMN tariff_plan.updated_at IS '更新时间';

-- 为 orders 表添加注释
COMMENT ON TABLE orders IS '订单表，存储宽带新装/变更/销户等主订单';

COMMENT ON COLUMN orders.id IS '订单ID，主键';
COMMENT ON COLUMN orders.user_id IS '用户ID，外键关联app_user表';
COMMENT ON COLUMN orders.status IS '订单状态：CREATED/RESERVED/ASSIGNED/ON_SITE/DONE/BILLED/CANCELED/TERMINATED';
COMMENT ON COLUMN orders.install_address IS '装机地址';
COMMENT ON COLUMN orders.deleted IS '软删除标识：0-未删除，1-已删除';
COMMENT ON COLUMN orders.deleted_at IS '软删除时间';
COMMENT ON COLUMN orders.version IS '乐观锁版本号';
COMMENT ON COLUMN orders.created_at IS '创建时间';
COMMENT ON COLUMN orders.updated_at IS '更新时间';

-- 为 order_item 表添加注释
COMMENT ON TABLE order_item IS '订单明细表，存储订单中的具体套餐信息';

COMMENT ON COLUMN order_item.id IS '订单明细ID，主键';
COMMENT ON COLUMN order_item.order_id IS '订单ID，外键关联orders表';
COMMENT ON COLUMN order_item.plan_code IS '套餐编码，外键关联tariff_plan表';
COMMENT ON COLUMN order_item.start_billing_at IS '生效的开始时间';
COMMENT ON COLUMN order_item.end_billing IS '结束的时间';
COMMENT ON COLUMN order_item.qty IS '数量';
COMMENT ON COLUMN order_item.price IS '价格';
COMMENT ON COLUMN order_item.created_at IS '创建时间';
COMMENT ON COLUMN order_item.updated_at IS '更新时间';

-- 为 order_event 表添加注释
COMMENT ON TABLE order_event IS '订单事件表，记录订单相关的事件信息';

COMMENT ON COLUMN order_event.id IS '事件ID，主键';
COMMENT ON COLUMN order_event.order_id IS '订单ID，外键关联orders表';
COMMENT ON COLUMN order_event.event IS '事件类型';
COMMENT ON COLUMN order_event.payload IS '事件详细信息，JSON格式数据';
COMMENT ON COLUMN order_event.created_at IS '事件创建时间';

--------------------------------------------------------------------------------
-- 3) 流程/工单域
-- id:
-- 类型: NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 作用: 工作流实例的唯一标识符，主键，自动生成
-- biz_type:
-- 类型: VARCHAR2(16) NOT NULL
-- 作用: 业务类型，标识该工作流实例处理的业务种类
-- 约束: 只能是以下三种值之一：
-- INSTALL: 安装业务
-- CHANGE: 变更业务
-- CANCEL: 销户业务
-- biz_id:
-- 类型: NUMBER(19) NOT NULL
-- 作用: 关联的业务实体ID，指向 orders.id
-- 说明: 通过这个字段与订单表建立关联，表示该工作流实例是为哪个订单服务的
-- state:
-- 类型: VARCHAR2(16) NOT NULL
-- 作用: 工作流实例的当前状态
-- 约束: 只能是以下三种值之一：
-- RUNNING: 运行中
-- FAILED: 失败
-- COMPLETED: 完成
-- created_at:
-- 类型: TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
-- 作用: 记录工作流实例的创建时间
-- updated_at:
-- 类型: TIMESTAMP(6)
-- 作用: 记录工作流实例的最后更新时间
--------------------------------------------------------------------------------
CREATE TABLE workflow_instance (
                                   id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                   biz_type   VARCHAR2(16) NOT NULL,
                                   biz_id     NUMBER(19)   NOT NULL, -- 对应 orders.id
                                   state      VARCHAR2(16) NOT NULL,
                                   created_at TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                                   updated_at TIMESTAMP(6)
);
ALTER TABLE workflow_instance
    ADD CONSTRAINT chk_wf_inst_biz_type CHECK (biz_type IN ('INSTALL','CHANGE','CANCEL'));
ALTER TABLE workflow_instance
    ADD CONSTRAINT chk_wf_inst_state CHECK (state IN ('RUNNING','FAILED','COMPLETED'));

-- FK 到 orders（若后续考虑兼容其他 biz，可暂不加）
ALTER TABLE workflow_instance
    ADD CONSTRAINT fk_wf_inst_order
        FOREIGN KEY (biz_id) REFERENCES orders(id);

CREATE INDEX idx_wf_inst_biz ON workflow_instance(biz_type, biz_id);

-- EXEC add_update_trigger('workflow_instance');
-- id:
-- 类型: NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 作用: 工作流步骤的唯一标识符，主键，自动递增
-- instance_id:
-- 类型: NUMBER(19) NOT NULL
-- 作用: 关联的工作流实例ID，外键指向 workflow_instance.id
-- 说明: 表示这个步骤属于哪个工作流实例
-- step_code:
-- 类型: VARCHAR2(32) NOT NULL
-- 作用: 步骤代码，标识具体的业务步骤类型
-- 注释提示: 可能的值包括 reserve(资源预留)、dispatch(派单)、open(开通)、bill(计费) 等
-- 说明: 定义了该步骤要执行的具体业务操作
-- status:
-- 类型: VARCHAR2(16) NOT NULL
-- 作用: 步骤的执行状态
-- 注释提示: 可能的值包括:
-- PENDING: 待处理
-- SUCCEEDED: 成功
-- FAILED: 失败
-- COMPENSATED: 已补偿(失败后回滚)
-- 说明: 跟踪每个步骤的执行结果
-- data_in:
-- 类型: CLOB
-- 作用: 步骤执行的输入数据
-- 说明: 存储进入该步骤时需要处理的数据，可能是JSON或其他格式
-- data_out:
-- 类型: CLOB
-- 作用: 步骤执行的输出数据
-- 说明: 存储该步骤执行完成后产生的结果数据
-- created_at:
-- 类型: TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
-- 作用: 记录步骤的创建时间
-- updated_at:
-- 类型: TIMESTAMP(6)
-- 作用: 记录步骤的最后更新时间
CREATE TABLE workflow_step (
                               id          NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                               instance_id NUMBER(19) NOT NULL,
                               step_code   VARCHAR2(32) NOT NULL, -- reserve/dispatch/open/bill/...
                               status      VARCHAR2(16) NOT NULL, -- PENDING/SUCCEEDED/FAILED/COMPENSATED
                               data_in     CLOB,
                               data_out    CLOB,
                               created_at  TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                               updated_at  TIMESTAMP(6)
);
ALTER TABLE workflow_step
    ADD CONSTRAINT fk_wf_step_inst
        FOREIGN KEY (instance_id) REFERENCES workflow_instance(id);

ALTER TABLE workflow_step
    ADD CONSTRAINT chk_wf_step_status CHECK (status IN ('PENDING','SUCCEEDED','FAILED','COMPENSATED'));

CREATE INDEX idx_wf_step_inst ON workflow_step(instance_id);

-- EXEC add_update_trigger('workflow_step');

-- id:
-- 类型: NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 作用: 工单唯一标识符，主键，自动递增
-- order_id:
-- 类型: NUMBER(19) NOT NULL
-- 作用: 关联的订单ID，外键指向 orders.id
-- 说明: 表示该工单属于哪个订单
-- status:
-- 类型: VARCHAR2(16) NOT NULL
-- 作用: 工单状态
-- 可能的值（根据注释）:
-- NEW: 新建工单
-- ASSIGNED: 已分配
-- IN_PROGRESS: 处理中
-- DONE: 已完成
-- CANCELED: 已取消
-- assignee:
-- 类型: VARCHAR2(64)
-- 作用: 工单处理人
-- 说明: 指派负责处理该工单的人员（可能是装维工程师等）
-- note:
-- 类型: VARCHAR2(512)
-- 作用: 工单备注信息
-- 说明: 记录工单相关的说明或处理记录
-- deleted:
-- 类型: NUMBER(1) DEFAULT 0 NOT NULL
-- 作用: 软删除标识
-- 说明: 0表示未删除，1表示已删除
-- deleted_at:
-- 类型: TIMESTAMP(6)
-- 作用: 软删除时间
-- 说明: 记录工单被删除的时间
-- created_at:
-- 类型: TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
-- 作用: 工单创建时间
-- updated_at:
-- 类型: TIMESTAMP(6)
-- 作用: 工单最后更新时间
CREATE TABLE ticket (
                        id          NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        order_id    NUMBER(19) NOT NULL,
                        status      VARCHAR2(16) NOT NULL, -- NEW/ASSIGNED/IN_PROGRESS/DONE/CANCELED
                        assignee    VARCHAR2(64),
                        note        VARCHAR2(512),
                        deleted     NUMBER(1) DEFAULT 0 NOT NULL,
                        deleted_at  TIMESTAMP(6),
                        created_at  TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                        updated_at  TIMESTAMP(6)
);
ALTER TABLE ticket
    ADD CONSTRAINT fk_ticket_order
        FOREIGN KEY (order_id) REFERENCES orders(id);

ALTER TABLE ticket
    ADD CONSTRAINT chk_ticket_status CHECK (status IN ('NEW','ASSIGNED','IN_PROGRESS','DONE','CANCELED'));

CREATE INDEX idx_ticket_order  ON ticket(order_id);
CREATE INDEX idx_ticket_del_at ON ticket(deleted, deleted_at);

-- EXEC add_update_trigger('ticket');
-- 为 workflow_instance 表添加注释
COMMENT ON TABLE workflow_instance IS '工作流实例表，用于跟踪订单相关的业务流程实例';

COMMENT ON COLUMN workflow_instance.id IS '工作流实例ID，主键，自动生成';
COMMENT ON COLUMN workflow_instance.biz_type IS '业务类型，INSTALL-安装业务，CHANGE-变更业务，CANCEL-销户业务';
COMMENT ON COLUMN workflow_instance.biz_id IS '关联的业务实体ID，外键指向 orders.id';
COMMENT ON COLUMN workflow_instance.state IS '工作流实例状态，RUNNING-运行中，FAILED-失败，COMPLETED-完成';
COMMENT ON COLUMN workflow_instance.created_at IS '创建时间';
COMMENT ON COLUMN workflow_instance.updated_at IS '更新时间';

-- 为 workflow_step 表添加注释
COMMENT ON TABLE workflow_step IS '工作流步骤表，记录工作流中每个具体步骤的执行情况';

COMMENT ON COLUMN workflow_step.id IS '工作流步骤ID，主键，自动递增';
COMMENT ON COLUMN workflow_step.instance_id IS '关联的工作流实例ID，外键指向 workflow_instance.id';
COMMENT ON COLUMN workflow_step.step_code IS '步骤代码，如reserve(资源预留)、dispatch(派单)、open(开通)、bill(计费)等';
COMMENT ON COLUMN workflow_step.status IS '步骤执行状态，PENDING-待处理，SUCCEEDED-成功，FAILED-失败，COMPENSATED-已补偿';
COMMENT ON COLUMN workflow_step.data_in IS '步骤执行的输入数据，JSON或其他格式';
COMMENT ON COLUMN workflow_step.data_out IS '步骤执行的输出数据，JSON或其他格式';
COMMENT ON COLUMN workflow_step.created_at IS '创建时间';
COMMENT ON COLUMN workflow_step.updated_at IS '更新时间';

-- 为 ticket 表添加注释
COMMENT ON TABLE ticket IS '工单表，用于管理订单相关的具体工作任务';

COMMENT ON COLUMN ticket.id IS '工单ID，主键，自动递增';
COMMENT ON COLUMN ticket.order_id IS '关联的订单ID，外键指向 orders.id';
COMMENT ON COLUMN ticket.status IS '工单状态，NEW-新建，ASSIGNED-已分配，IN_PROGRESS-处理中，DONE-已完成，CANCELED-已取消';
COMMENT ON COLUMN ticket.assignee IS '工单处理人，指派负责处理该工单的人员';
COMMENT ON COLUMN ticket.note IS '工单备注信息，记录工单相关的说明或处理记录';
COMMENT ON COLUMN ticket.deleted IS '软删除标识，0-未删除，1-已删除';
COMMENT ON COLUMN ticket.deleted_at IS '软删除时间';
COMMENT ON COLUMN ticket.created_at IS '创建时间';
COMMENT ON COLUMN ticket.updated_at IS '更新时间';

--------------------------------------------------------------------------------
-- 4) 资源域
--------------------------------------------------------------------------------
-- 设备
-- id:
-- 类型: NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 作用: 设备资源的唯一标识符，主键，自动递增
-- sn:
-- 类型: VARCHAR2(64) NOT NULL
-- 作用: 设备序列号
-- 约束: uq_resource_device_sn 唯一约束，确保每个设备序列号唯一
-- model:
-- 类型: VARCHAR2(64)
-- 作用: 设备型号
-- 说明: 记录设备的具体型号信息
-- status:
-- 类型: VARCHAR2(16) NOT NULL
-- 作用: 设备状态
-- 约束: chk_resource_device_status 检查约束，只能是以下值之一：
-- STOCK: 库存状态（未分配）
-- ASSIGNED: 已分配状态（已分配给订单）
-- RETIRED: 退役状态（已报废或停用）
-- order_id:
-- 类型: NUMBER(19)
-- 作用: 关联的订单ID
-- 说明: 外键指向 orders.id，表示该设备分配给了哪个订单
-- 约束: fk_resource_device_order 外键约束，删除订单时设置为NULL
-- created_at:
-- 类型: TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
-- 作用: 设备记录的创建时间
-- updated_at:
-- 类型: TIMESTAMP(6)
-- 作用: 设备记录的最后更新时间
CREATE TABLE resource_device (
                                 id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                                 sn         VARCHAR2(64) NOT NULL,
                                 model      VARCHAR2(64),
                                 qty        NUMBER(5) NOT NULL,
                                 price      NUMBER(5) NOT NULL,
                                 status     VARCHAR2(16) NOT NULL, -- STOCK/ASSIGNED/RETIRED
                                 order_id   NUMBER(19),
                                 created_at TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                                 updated_at TIMESTAMP(6)
);
ALTER TABLE resource_device
    ADD CONSTRAINT uq_resource_device_sn UNIQUE (sn);
ALTER TABLE resource_device
    ADD CONSTRAINT chk_resource_device_status CHECK (status IN ('STOCK','ASSIGNED','RETIRED'));
ALTER TABLE resource_device
    ADD CONSTRAINT fk_resource_device_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL;

CREATE INDEX idx_device_order ON resource_device(order_id);

-- EXEC add_update_trigger('resource_device');

-- IP 池
-- id:
-- 类型: NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 作用: IP资源的唯一标识符，主键，自动递增
-- ip:
-- 类型: VARCHAR2(64) NOT NULL
-- 作用: IP地址
-- 约束: uq_ip_pool_ip 唯一约束，确保每个IP地址唯一
-- status:
-- 类型: VARCHAR2(16) NOT NULL
-- 作用: IP地址状态
-- 约束: chk_ip_pool_status 检查约束，只能是以下值之一：
-- FREE: 空闲可用状态
-- ASSIGNED: 已分配状态
-- order_id:
-- 类型: NUMBER(19)
-- 作用: 关联的订单ID
-- 说明: 外键指向 orders.id，表示该IP地址分配给了哪个订单
-- 约束: fk_ip_pool_order 外键约束，删除订单时设置为NULL
-- created_at:
-- 类型: TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
-- 作用: IP记录的创建时间
-- updated_at:
-- 类型: TIMESTAMP(6)
-- 作用: IP记录的最后更新时间
CREATE TABLE ip_pool (
                         id         NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         ip         VARCHAR2(64) NOT NULL,
                         status     VARCHAR2(16) NOT NULL, -- FREE/ASSIGNED
--                          ip_period  NUMBER(10),           -- IP有效期（天数）NULL代表永久
                         order_id   NUMBER(19),
                         created_at TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                         updated_at TIMESTAMP(6),
                         ip_bandwith NUMBER(10) DEFAULT 1000 NOT NULL,
                         avaliable_bandwidth NUMBER(10) DEFAULT 1000 NOT NULL
);
ALTER TABLE ip_pool
    ADD CONSTRAINT uq_ip_pool_ip UNIQUE (ip);
ALTER TABLE ip_pool
    ADD CONSTRAINT chk_ip_pool_status CHECK (status IN ('FREE','ASSIGNED'));
ALTER TABLE ip_pool
    ADD CONSTRAINT fk_ip_pool_order FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL;
ALTER TABLE tariff_plan
    ADD CONSTRAINT fk_tariff_plan_ip FOREIGN KEY (IP_ID) REFERENCES ip_pool(id) ON DELETE SET NULL;
ALTER TABLE tariff_plan
    ADD CONSTRAINT fk_tariff_plan_device FOREIGN KEY (DEVICE_ID) REFERENCES resource_device(id) ON DELETE SET NULL;


CREATE INDEX idx_ip_order ON ip_pool(order_id);

-- EXEC add_update_trigger('ip_pool');

-- 为 resource_device 表添加注释
COMMENT ON TABLE resource_device IS '网络设备资源表，用于管理网络设备的库存和分配状态';

COMMENT ON COLUMN resource_device.id IS '设备资源ID，主键，自动递增';
COMMENT ON COLUMN resource_device.sn IS '设备序列号，唯一标识一个设备';
COMMENT ON COLUMN resource_device.model IS '设备型号';
COMMENT ON COLUMN resource_device.qty IS '设备数量';
COMMENT ON COLUMN resource_device.status IS '设备状态，STOCK-库存，ASSIGNED-已分配，RETIRED-退役';
COMMENT ON COLUMN resource_device.order_id IS '关联的订单ID，外键指向orders.id';
COMMENT ON COLUMN resource_device.created_at IS '创建时间';
COMMENT ON COLUMN resource_device.updated_at IS '更新时间';

-- 为 ip_pool 表添加注释
COMMENT ON TABLE ip_pool IS 'IP地址资源池表，用于管理IP地址的分配和使用';

COMMENT ON COLUMN ip_pool.id IS 'IP资源ID，主键，自动递增';
COMMENT ON COLUMN ip_pool.ip IS 'IP地址';
COMMENT ON COLUMN ip_pool.status IS 'IP地址状态，FREE-空闲，ASSIGNED-已分配';
-- COMMENT ON COLUMN ip_pool.ip_period IS 'ip有效期';
COMMENT ON COLUMN ip_pool.order_id IS '关联的订单ID，外键指向orders.id';
COMMENT ON COLUMN ip_pool.created_at IS '创建时间';
COMMENT ON COLUMN ip_pool.updated_at IS '更新时间';

--------------------------------------------------------------------------------
-- 7) 运维/可靠投递（Outbox）
--------------------------------------------------------------------------------
-- outbox_event 表详解
-- outbox_event 表是用于实现可靠消息投递的"发件箱模式"(Outbox Pattern)的核心表。它确保业务操作和消息发送的原子性，防止消息丢失。
-- 字段详解：
-- id:
-- 类型: NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY
-- 作用: 事件的唯一标识符，主键，自动递增
-- 说明: 每个业务事件都有唯一的ID
-- aggregate:
-- 类型: VARCHAR2(64) NOT NULL
-- 作用: 聚合根类型
-- 说明: 标识产生事件的业务聚合根类型，如"orders"、"ticket"等
-- 示例: "orders"表示订单相关事件，"ticket"表示工单相关事件
-- aggregate_id:
-- 类型: NUMBER(19) NOT NULL
-- 作用: 聚合根ID
-- 说明: 对应聚合根实体的主键ID，与具体业务表关联
-- 示例: 如果aggregate是"orders"，则aggregate_id对应orders.id
-- event_type:
-- 类型: VARCHAR2(64) NOT NULL
-- 作用: 事件类型
-- 说明: 标识具体的业务事件类型
-- 示例: "ORDER_CREATED"、"ORDER_COMPLETED"、"TICKET_ASSIGNED"等
-- payload:
-- 类型: CLOB
-- 作用: 事件载荷数据
-- 说明: 包含事件详细信息的JSON或其他格式数据
-- 内容: 通常包含事件发生时的业务数据快照
-- status:
-- 类型: VARCHAR2(16) DEFAULT 'NEW' NOT NULL
-- 作用: 事件处理状态
-- 说明: 标识事件消息的处理状态
-- 约束: chk_outbox_status 检查约束，只能是以下值之一：
-- NEW: 新事件，待处理
-- SENT: 已发送
-- FAILED: 发送失败
-- retry_count:
-- 类型: NUMBER(10) DEFAULT 0 NOT NULL
-- 作用: 重试次数
-- 说明: 记录事件消息发送失败后的重试次数，用于控制重试策略
-- created_at:
-- 类型: TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL
-- 作用: 事件创建时间
-- 说明: 记录事件首次产生的时间
-- updated_at:
-- 类型: TIMESTAMP(6)
-- 作用: 事件最后更新时间
-- 说明: 记录事件状态变更的时间
CREATE TABLE outbox_event (
                              id           NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                              aggregate    VARCHAR2(64) NOT NULL,   -- orders/ticket/...
                              aggregate_id NUMBER(19)   NOT NULL,
                              event_type   VARCHAR2(64) NOT NULL,
                              payload      CLOB,
                              status       VARCHAR2(16) DEFAULT 'NEW' NOT NULL, -- NEW/SENT/FAILED
                              retry_count  NUMBER(10)   DEFAULT 0 NOT NULL,
                              created_at   TIMESTAMP(6) DEFAULT SYSTIMESTAMP NOT NULL,
                              updated_at   TIMESTAMP(6)
);
ALTER TABLE outbox_event
    ADD CONSTRAINT chk_outbox_status CHECK (status IN ('NEW','SENT','FAILED'));

CREATE INDEX idx_outbox_status ON outbox_event(status);
CREATE INDEX idx_outbox_agg    ON outbox_event(aggregate, aggregate_id);

-- EXEC add_update_trigger('outbox_event');
-- 为 outbox_event 表添加注释
COMMENT ON TABLE outbox_event IS '发件箱事件表，用于实现可靠消息投递，确保业务操作与消息发送的原子性';

COMMENT ON COLUMN outbox_event.id IS '事件ID，主键，自动递增';
COMMENT ON COLUMN outbox_event.aggregate IS '聚合根类型，如orders、ticket等，标识产生事件的业务实体类型';
COMMENT ON COLUMN outbox_event.aggregate_id IS '聚合根ID，对应业务实体的主键ID';
COMMENT ON COLUMN outbox_event.event_type IS '事件类型，标识具体的业务事件，如ORDER_CREATED、TICKET_ASSIGNED等';
COMMENT ON COLUMN outbox_event.payload IS '事件载荷数据，包含事件详细信息的JSON或其他格式数据';
COMMENT ON COLUMN outbox_event.status IS '事件处理状态，NEW-新事件待处理，SENT-已发送，FAILED-发送失败';
COMMENT ON COLUMN outbox_event.retry_count IS '重试次数，记录事件发送失败后的重试次数';
COMMENT ON COLUMN outbox_event.created_at IS '事件创建时间';
COMMENT ON COLUMN outbox_event.updated_at IS '事件最后更新时间';



BEGIN
  --
  add_update_trigger('tariff_plan')
  -- 订单域
  add_update_trigger('ORDERS');
  add_update_trigger('ORDER_ITEM');

  -- 流程/工单域
  add_update_trigger('WORKFLOW_INSTANCE');
  add_update_trigger('WORKFLOW_STEP');
  add_update_trigger('TICKET');

  -- 资源域
  add_update_trigger('RESOURCE_DEVICE');
  add_update_trigger('IP_POOL');

  -- 运维/Outbox
  add_update_trigger('OUTBOX_EVENT');
END;
/

BEGIN
  add_deleted_at_trigger('ORDERS');
  add_deleted_at_trigger('TICKET');
END;
/

/**
自动将超时30分钟的订单修改为在购物车中
 */
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
            job_name        => 'JOB_ORDER_ITEM_PENDING_TO_CART',
            job_type        => 'PLSQL_BLOCK',
            job_action      => q'[
      BEGIN
        UPDATE ORDER_ITEM
           SET STATUS = '在购物车中',
               UPDATED_AT = SYSTIMESTAMP,
               STATUS_EXPIRE_AT = NULL
         WHERE STATUS = '待支付'
           AND STATUS_EXPIRE_AT IS NOT NULL
           AND STATUS_EXPIRE_AT <= SYSTIMESTAMP;
        COMMIT;
      END;
    ]',
            start_date      => SYSTIMESTAMP,
            repeat_interval => 'FREQ=MINUTELY;INTERVAL=1',  -- 每分钟跑一次
            enabled         => TRUE,
            comments        => '自动把超时未支付的订单项从“待支付”改回“在购物车中”'
    );
END;
/



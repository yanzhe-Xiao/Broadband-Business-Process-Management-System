CREATE TABLE perm_group (
                            id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            code         VARCHAR2(64)     NOT NULL UNIQUE,  -- 如: SYS, ORDER, BILLING
                            name         VARCHAR2(128)    NOT NULL,
                            sort_no      NUMBER(10)       DEFAULT 0 NOT NULL,
                            deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                            deleted_at   TIMESTAMP(6),
                            version      NUMBER(10)       DEFAULT 0 NOT NULL,
                            created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                            updated_at   TIMESTAMP(6)
);

CREATE TABLE permission (
                            id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                            group_code   VARCHAR2(64)     NOT NULL,       -- FK -> perm_group.code
                            code         VARCHAR2(128)    NOT NULL UNIQUE, -- 如: ORDER:READ, ORDER:CREATE
                            name         VARCHAR2(128)    NOT NULL,
                            type         VARCHAR2(32)     DEFAULT 'API' NOT NULL, -- API/MENU/BUTTON
                            pre_resource VARCHAR2(256),                    -- 资源路径或标识
                            action       VARCHAR2(32),                     -- READ/CREATE/UPDATE/DELETE
                            meta_json    CLOB,
                            deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                            deleted_at   TIMESTAMP(6),
                            version      NUMBER(10)       DEFAULT 0 NOT NULL,
                            created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                            updated_at   TIMESTAMP(6)
);

CREATE TABLE role (
                      id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                      role_code    VARCHAR2(64)     NOT NULL UNIQUE,   -- ROLE_ADMIN / ROLE_TECH / ROLE_AGENT / ROLE_FIN
                      role_name    VARCHAR2(128)    NOT NULL,
                      status       VARCHAR2(16)     DEFAULT 'ACTIVE' NOT NULL,
                      data_scope   VARCHAR2(64),                      -- 全部/本部门/自定义 等（可选）
                      deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                      deleted_at   TIMESTAMP(6),
                      version      NUMBER(10)       DEFAULT 0 NOT NULL,
                      created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                      updated_at   TIMESTAMP(6)
);

CREATE TABLE app_user (
                          id           NUMBER(19)       GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                          username     VARCHAR2(64)     NOT NULL UNIQUE,
                          password     VARCHAR2(128)    NOT NULL,       -- BCRYPT
                          full_name    VARCHAR2(128),
                          phone        VARCHAR2(32),
                          email        VARCHAR2(128),
                          status       VARCHAR2(16)     DEFAULT 'ACTIVE' NOT NULL,
                          tenant_id    VARCHAR2(64),                    -- 多租户可选
                          deleted      NUMBER(1)        DEFAULT 0 NOT NULL,
                          deleted_at   TIMESTAMP(6),
                          version      NUMBER(10)       DEFAULT 0 NOT NULL,
                          created_at   TIMESTAMP(6)     DEFAULT SYSTIMESTAMP,
                          updated_at   TIMESTAMP(6)
);

CREATE TABLE user_role (
                           user_id      NUMBER(19)       NOT NULL,
                           role_id      NUMBER(19)       NOT NULL,
                           PRIMARY KEY (user_id, role_id),
                           CONSTRAINT fk_ur_user FOREIGN KEY (user_id) REFERENCES app_user(id),
                           CONSTRAINT fk_ur_role FOREIGN KEY (role_id) REFERENCES role(id)
);

CREATE TABLE role_permission (
                                 role_id      NUMBER(19)       NOT NULL,
                                 perm_id      NUMBER(19)       NOT NULL,
                                 PRIMARY KEY (role_id, perm_id),
                                 CONSTRAINT fk_rp_role FOREIGN KEY (role_id) REFERENCES role(id),
                                 CONSTRAINT fk_rp_perm FOREIGN KEY (perm_id) REFERENCES permission(id)
);



-----------------------------------
-- 1) 权限分组
-----------------------------------
INSERT INTO perm_group (code, name, sort_no) VALUES ('SYS',    '系统管理', 10);
INSERT INTO perm_group (code, name, sort_no) VALUES ('ORDER',  '订单管理', 20);
INSERT INTO perm_group (code, name, sort_no) VALUES ('BILLING','计费出账', 30);

-----------------------------------
-- 2) 细粒度权限（示例）
-----------------------------------
-- 系统管理
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:READ',   '用户查看',   'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:CREATE', '用户创建',   'API', 'CREATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:UPDATE', '用户修改',   'API', 'UPDATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:USER:DELETE', '用户删除',   'API', 'DELETE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:ROLE:READ',   '角色查看',   'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('SYS', 'SYS:ROLE:ASSIGN', '角色分配',   'API', 'UPDATE');

-- 订单管理
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:READ',    '订单查看',   'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:CREATE',  '订单创建',   'API', 'CREATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:UPDATE',  '订单更新',   'API', 'UPDATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('ORDER', 'ORDER:CANCEL',  '订单撤销',   'API', 'DELETE');

-- 计费出账
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('BILLING', 'BILLING:READ',     '账单查看', 'API', 'READ');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('BILLING', 'BILLING:GENERATE', '生成账单', 'API', 'CREATE');
INSERT INTO permission (group_code, code, name, type, action)
VALUES ('BILLING', 'INVOICE:READ',     '发票查看', 'API', 'READ');

-----------------------------------
-- 3) 角色
-----------------------------------
INSERT INTO role (role_code, role_name) VALUES ('ROLE_ADMIN', '平台管理员');
INSERT INTO role (role_code, role_name) VALUES ('ROLE_AGENT', '客服坐席');
INSERT INTO role (role_code, role_name) VALUES ('ROLE_TECH',  '装维工程师');
INSERT INTO role (role_code, role_name) VALUES ('ROLE_FIN',   '财务人员');

-----------------------------------
-- 4) 初始管理员账户
-- 这里直接给“admin / password”
-- 密码使用 BCrypt，并带前缀 {bcrypt} 方便 Spring Security 识别
-- 这个哈希对应明文 "password"
-----------------------------------
INSERT INTO app_user (username, password, full_name, email, status)
VALUES (
           'admin',
           '{bcrypt}$2a$10$7EqJtq98hPqEX7fNZaFWoOe.F7fxe7cZ2i9Vwqj/3GJ8UViT7hZGa',
           '系统管理员',
           'admin@example.com',
           'ACTIVE'
       );
COMMIT;

-----------------------------------
-- 5) 绑定用户角色：admin -> ROLE_ADMIN
-----------------------------------
INSERT INTO user_role (user_id, role_id)
SELECT u.id, r.id
FROM app_user u, role r
WHERE u.username = 'admin'
  AND r.role_code = 'ROLE_ADMIN';
commit
    -----------------------------------
-- 6) 角色授权
--   - ROLE_ADMIN 拥有所有权限
--   - ROLE_AGENT：订单查看/创建
--   - ROLE_TECH ：订单查看/更新
--   - ROLE_FIN  ：计费查看/生成 + 发票查看
-----------------------------------

-- ROLE_ADMIN -> ALL
    INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id
FROM role r CROSS JOIN permission p
WHERE r.role_code = 'ROLE_ADMIN';
COMMIT;

-- ROLE_AGENT
INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_AGENT'
  AND p.code IN ('ORDER:READ','ORDER:CREATE');
COMMIT;

-- ROLE_TECH
INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_TECH'
  AND p.code IN ('ORDER:READ','ORDER:UPDATE');
COMMIT;

-- ROLE_FIN
INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_FIN'
  AND p.code IN ('BILLING:READ','BILLING:GENERATE','INVOICE:READ');
COMMIT;

INSERT INTO role (role_code, role_name) VALUES ('ROLE_CUSTOMER', '客户');
commit

-- 赋权：客户可创建/查看订单、查看账单和发票
    INSERT INTO role_permission (role_id, perm_id)
SELECT r.id, p.id
FROM role r JOIN permission p ON 1=1
WHERE r.role_code = 'ROLE_CUSTOMER'
  AND p.code IN (
                 'ORDER:READ',         -- 查看（代码里只放行“自己的”）
                 'ORDER:CREATE',       -- 下单
                 'BILLING:READ',       -- 查账单
                 'INVOICE:READ'        -- 查发票
    );
COMMIT;

